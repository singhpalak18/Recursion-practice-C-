void f(int i,int target,vector<int>&candidates,vector<int>&vec,vector<vector<int>>&ans)
    {
        if(target==0)
        {
            ans.push_back(vec);
            return;
        }
        if(i>=candidates.size()|| target<0) return;
        for (int j = i; j < candidates.size(); ++j) {
            // Skip duplicates to avoid generating duplicate subsets
            if (j > i && candidates[j] == candidates[j - 1]) {
                continue;
            }
            
            if (target - candidates[j] < 0) {
                break;
            }
            
            vec.push_back(candidates[j]);
            f(j + 1, target - candidates[j], candidates, vec, ans);
            vec.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        vector<int>vec;
        sort(candidates.begin(),candidates.end());
        f(0,target,candidates,vec,ans);
        return ans;
    }
